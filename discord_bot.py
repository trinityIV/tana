import os
import discord
from discord.ext import commands
from dotenv import load_dotenv
import id_protector
import asyncio
import datetime

# Charger les variables d'environnement
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# Configuration du bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Ajouter une variable pour suivre le propri√©taire du bot
owner_user = None

@bot.event
async def on_ready():
    print(f'Bot connect√© en tant que {bot.user.name}')
    print('-------------------')
    
    # Configurer le gestionnaire d'alertes
    id_protector.set_alert_handler(alert_handler)
    id_protector.enable_alerts(True)
    
    # Charger le propri√©taire s'il est configur√©
    await load_owner()

async def load_owner():
    """Charge l'utilisateur propri√©taire du bot."""
    global owner_user
    
    if id_protector.load_config():
        owner_id = id_protector.get_owner_id()
        try:
            owner_user = await bot.fetch_user(int(owner_id))
            print(f"Propri√©taire charg√©: {owner_user.name}#{owner_user.discriminator}")
        except:
            print(f"Impossible de charger l'utilisateur avec l'ID {owner_id}")

def alert_handler(alert_info):
    """
    Gestionnaire d'alertes qui envoie une notification au propri√©taire.
    Sera appel√© par id_protector lorsqu'une tentative suspecte est d√©tect√©e.
    """
    if owner_user:
        # Cr√©er un message d'alerte bas√© sur les informations
        message = f"‚ö†Ô∏è **ALERTE DE S√âCURIT√â** ‚ö†Ô∏è\n\n"
        message += f"Une tentative d'utilisation de votre token a √©t√© d√©tect√©e!\n"
        message += f"**Horodatage:** {alert_info['timestamp']}\n"
        message += f"**ID Discord:** {alert_info['discord_id']}\n"
        message += f"**R√©sultat:** {alert_info['result']}\n"
        
        if alert_info.get('ip'):
            message += f"**IP:** {alert_info['ip']}\n"
        
        message += "\nSi ce n'est pas vous, votre s√©curit√© peut √™tre compromise. G√©n√©rez un nouveau token imm√©diatement!"
        
        # Utiliser asyncio pour envoyer le message de mani√®re asynchrone
        asyncio.create_task(send_alert_to_owner(message))

async def send_alert_to_owner(message):
    """Envoie un message d'alerte au propri√©taire."""
    if owner_user:
        try:
            await owner_user.send(message)
            print(f"Alerte envoy√©e √† {owner_user.name}")
        except Exception as e:
            print(f"Erreur lors de l'envoi de l'alerte: {str(e)}")

@bot.command(name='setup')
async def setup_security(ctx, token: str = None):
    """
    Configure la s√©curit√© pour le propri√©taire du bot.
    Usage: !setup <token>
    """
    # V√©rifier si la commande est ex√©cut√©e dans un canal priv√©
    if not isinstance(ctx.channel, discord.DMChannel):
        await ctx.send("‚ö†Ô∏è Cette commande ne peut √™tre utilis√©e que dans un message priv√©.")
        await ctx.message.delete()
        return
    
    # V√©rifier si un token est fourni
    if not token:
        await ctx.send("‚ö†Ô∏è Veuillez fournir un token. Usage: `!setup <token>`")
        return
    
    # Configurer la s√©curit√©
    owner_id = str(ctx.author.id)
    id_protector.setup_security(token, owner_id)
    
    await ctx.send("‚úÖ Configuration termin√©e. Vous √™tes maintenant le propri√©taire du bot.")

@bot.command(name='verify')
async def verify_user(ctx, token: str = None):
    """
    V√©rifie l'identit√© d'un utilisateur.
    Usage: !verify <token>
    """
    # V√©rifier si la commande est ex√©cut√©e dans un canal priv√©
    if not isinstance(ctx.channel, discord.DMChannel):
        await ctx.send("‚ö†Ô∏è Cette commande ne peut √™tre utilis√©e que dans un message priv√©.")
        await ctx.message.delete()
        return
    
    # V√©rifier si un token est fourni
    if not token:
        await ctx.send("‚ö†Ô∏è Veuillez fournir un token. Usage: `!verify <token>`")
        return
    
    # V√©rifier l'identit√©
    user_id = str(ctx.author.id)
    result = id_protector.verify_user(user_id, token)
    
    if result["success"]:
        await ctx.send(f"‚úÖ {result['message']}")
    else:
        await ctx.send(f"‚ùå {result['message']}")

@bot.command(name='generate')
async def generate_token(ctx):
    """
    G√©n√®re un nouveau token s√©curis√©.
    Usage: !generate
    """
    # V√©rifier si la commande est ex√©cut√©e dans un canal priv√©
    if not isinstance(ctx.channel, discord.DMChannel):
        await ctx.send("‚ö†Ô∏è Cette commande ne peut √™tre utilis√©e que dans un message priv√©.")
        await ctx.message.delete()
        return
    
    token = id_protector.generate_secure_token()
    await ctx.send(f"üîë Votre nouveau token s√©curis√© est: `{token}`\n‚ö†Ô∏è **IMPORTANT**: Conservez ce token en lieu s√ªr et ne le partagez jamais!")

@bot.command(name='find_user')
async def find_user(ctx, user_id: str = None, admin_token: str = None):
    """
    V√©rifie si un ID utilisateur est enregistr√©.
    Usage: !find_user <user_id> <admin_token>
    """
    # V√©rifier si la commande est ex√©cut√©e dans un canal priv√©
    if not isinstance(ctx.channel, discord.DMChannel):
        await ctx.send("‚ö†Ô∏è Cette commande ne peut √™tre utilis√©e que dans un message priv√©.")
        await ctx.message.delete()
        return
    
    # V√©rifier si les param√®tres sont fournis
    if not user_id or not admin_token:
        await ctx.send("‚ö†Ô∏è Veuillez fournir un ID utilisateur et votre token admin. Usage: `!find_user <user_id> <admin_token>`")
        return
    
    # V√©rifier si l'utilisateur est l'administrateur
    admin_id = str(ctx.author.id)
    if not id_protector.verify_admin(admin_id, admin_token):
        await ctx.send("‚ùå Acc√®s refus√©. Vous n'√™tes pas autoris√© √† effectuer cette action.")
        return
    
    # V√©rifier si l'ID utilisateur est enregistr√©
    is_registered = id_protector.is_registered_user(user_id)
    
    if is_registered:
        await ctx.send(f"‚úÖ L'utilisateur avec l'ID `{user_id}` est enregistr√© dans le syst√®me.")
    else:
        await ctx.send(f"‚ùå L'utilisateur avec l'ID `{user_id}` n'est pas enregistr√© dans le syst√®me.")

@bot.command(name='list_users')
async def list_users(ctx, admin_token: str = None):
    """
    Liste tous les utilisateurs enregistr√©s (uniquement pour l'administrateur).
    Usage: !list_users <admin_token>
    """
    # V√©rifier si la commande est ex√©cut√©e dans un canal priv√©
    if not isinstance(ctx.channel, discord.DMChannel):
        await ctx.send("‚ö†Ô∏è Cette commande ne peut √™tre utilis√©e que dans un message priv√©.")
        await ctx.message.delete()
        return
    
    # V√©rifier si le token admin est fourni
    if not admin_token:
        await ctx.send("‚ö†Ô∏è Veuillez fournir votre token admin. Usage: `!list_users <admin_token>`")
        return
    
    # V√©rifier si l'utilisateur est l'administrateur
    admin_id = str(ctx.author.id)
    if not id_protector.verify_admin(admin_id, admin_token):
        await ctx.send("‚ùå Acc√®s refus√©. Vous n'√™tes pas autoris√© √† effectuer cette action.")
        return
    
    # Dans la version actuelle, nous n'avons qu'un seul utilisateur (le propri√©taire)
    if not id_protector.load_config():
        await ctx.send("‚ùå Aucune configuration trouv√©e.")
        return
    
    await ctx.send(f"üë§ Utilisateur enregistr√©: `{id_protector.get_owner_id()}`")

@bot.command(name='alerts')
async def manage_alerts(ctx, action: str = None):
    """
    Activer ou d√©sactiver les alertes de s√©curit√©.
    Usage: !alerts on|off
    """
    # V√©rifier si la commande est ex√©cut√©e dans un canal priv√©
    if not isinstance(ctx.channel, discord.DMChannel):
        await ctx.send("‚ö†Ô∏è Cette commande ne peut √™tre utilis√©e que dans un message priv√©.")
        await ctx.message.delete()
        return
    
    # V√©rifier si l'utilisateur est le propri√©taire
    if str(ctx.author.id) != id_protector.get_owner_id():
        await ctx.send("‚ùå Seul le propri√©taire peut g√©rer les alertes.")
        return
    
    if action and action.lower() == "on":
        id_protector.enable_alerts(True)
        await ctx.send("‚úÖ Les alertes de s√©curit√© sont maintenant activ√©es.")
    elif action and action.lower() == "off":
        id_protector.enable_alerts(False)
        await ctx.send("üîï Les alertes de s√©curit√© sont maintenant d√©sactiv√©es.")
    else:
        await ctx.send("‚ö†Ô∏è Veuillez sp√©cifier 'on' ou 'off'. Usage: `!alerts on` ou `!alerts off`")

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        return
    await ctx.send(f"‚ùå Erreur: {str(error)}")

# D√©marrer le bot
if __name__ == "__main__":
    if not BOT_TOKEN:
        print("Erreur: BOT_TOKEN non d√©fini dans le fichier .env")
        exit(1)
    
    # Essayer de charger la configuration existante
    id_protector.load_config()
    
    bot.run(BOT_TOKEN)
